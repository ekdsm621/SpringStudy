<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
<!-- 생성자 -->
<!-- 
<bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod" lazy-init="true">
	<constructor-arg index="0" ref="sony"></constructor-arg>
	<constructor-arg index="1" value="5000"></constructor-arg>
</bean>
<bean id="sony" class="polymorphism.SonySpeaker">
</bean>
 -->
 
<!-- setter: bean 객체 생성 직후, 스프링 컨테이너가 setter 메서드 자동으로 호출 -->
<!-- setter 메서드 / 기본생성자 필요 -->
<!-- 
<bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod" lazy-init="true">
	<property name="speaker" ref="sony"></property>
	<property name="price" ref="5000"></property>
</bean>
<bean id="sony" class="polymorphism.SonySpeaker">
</bean>
 -->

<!-- p Namespace 사용 -->
<!-- 
<bean id="tv" class="polymorphism.SamsungTV"
	p:speaker-ref="sony"
	p:price="5000">
</bean>
<bean id="sony" class="polymorphism.SonySpeaker"></bean>
 -->
 
 <!-- 컬렉션 객체 주입(List) -->
 <!-- 
 <bean id="collectionBean" class="com.springbook.ioc.injection.CollectionBean">
 	<property name="addressList">
 		<list>
 			<value>서울시 강남구 역삼동</value>
 			<value>서울시 성동구 행당동</value>
 		</list>
 	</property>
 </bean>
  -->
  
<!-- 컬렉션 객체 주입(Set):중복 데이터 저장X -->
<!-- 
<bean id="collectionBean" class="com.springbook.ioc.injection.CollectionBean">
	<property name="addressList">
		<map value-type="java.lang.String">
			<entry>
				<key>
					<value>고길동</value>
				</key>
				<value>서울시 강남구 역삼동</value>
			</entry>
			<entry>
				<key>
					<value>마이콜</value>
				</key>
				<value>서울시 강서구 화곡동</value>
			</entry>
		</map>
	</property>
</bean>
 -->
 
 <!-- 
 <bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
 	<property name="userDAO" ref="userDAO"></property>
 </bean>
<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO">
</bean>
 -->
 <context:component-scan base-package="com.springbook.biz"></context:component-scan>
 
 <!-- 
 <bean id="log" class="com.springbook.biz.common.AfterThrowingAdvice"></bean>
 <aop:config>
 	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut" />
 	<aop:aspect ref="log">
 		<aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog" throwing="exception"/>
 	</aop:aspect>
 </aop:config>
  -->

<!-- AOP 관련 어노테이션들을 인식하고 용도에 맞게 처리 -->
<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

<!-- DataSource 설정 -->
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	<property name="driverClassName" value="org.h2.Driver"/>
	<property name="url" value="jdbc:h2:tcp://localhost/~/test"/>
	<property name="username" value="sa"/>
	<property name="password" value=""/>
</bean>

<!-- Spring JDBC 설정 -->
<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	<property name="dataSource" ref="dataSource"></property>
</bean>

<!-- Transaction 실행 -->
<!-- 
<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
</bean>
	
<tx:advice id="txAdvice" transaction-manager="txManager">
	<tx:attributes>
		<tx:method name="get*" read-only="true"/>
		<tx:method name="*"/>
	</tx:attributes>
</tx:advice>

<aop:config>
	<aop:pointcut expression="execution(* com.springbook.biz..*(..))" id="txPointcut"/>
	<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
</aop:config>
 -->
</beans>
